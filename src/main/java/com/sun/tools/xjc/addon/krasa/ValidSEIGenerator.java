package com.sun.tools.xjc.addon.krasa;

import com.sun.tools.xjc.BadCommandLineException;
import com.sun.tools.xjc.addon.krasa.validations.ProcessorForJavaModel;
import com.sun.tools.xjc.addon.krasa.validations.ValidationsOptions;
import java.util.Arrays;
import java.util.Map;
import javax.xml.namespace.QName;
import org.apache.cxf.helpers.CastUtils;
import org.apache.cxf.tools.common.ToolConstants;
import org.apache.cxf.tools.common.ToolContext;
import org.apache.cxf.tools.common.ToolException;
import org.apache.cxf.tools.common.model.JavaModel;
import org.apache.cxf.tools.wsdlto.frontend.jaxws.generators.SEIGenerator;
import org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.WSDLToJavaProcessor;

/**
 * Selectively add the {@code @Valid} annotation to the method and to its parameters defined in
 * the interface generated by the XCF wsdl2java plugin.
 * <br>
 * To make it work the plugin must be initialized with the {@code -frontend krasa} option which
 * in the maven plugin definition can be configured like this (see the
 * <a href='https://github.com/fillumina/krasa-jaxb-tools-jdk21-example/blob/master/krasa-cxf-codegen-plugin-jakarta-jdk21-example/pom.xml'>krasa-jaxb-tools-jdk21-example/krasa-cxf-codegen-plugin-jakarta-jdk21-example</a>):
 *
<pre>
  {@code
    <plugin>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-codegen-plugin</artifactId>
        <version>4.1.0</version>
        <executions>
          <execution>
            <id>wsdl2java</id>
            <phase>generate-sources</phase>
            <configuration>
              <wsdlOptions>
                <wsdlOption>
                  <wsdl>${project.parent.basedir}/wsdl/Hello.wsdl</wsdl>
                  <extraargs>
                    <extraarg>-verbose</extraarg>
                    <extraarg>-frontend</extraarg>
                    <extraarg>krasa</extraarg>
                    <extraarg>-xjc-XJsr303Annotations:verbose=true</extraarg>
                    <extraarg>-xjc-XJsr303Annotations</extraarg>
                    <!-- parameter for the ValidSEIGenerator -->
                    <extraarg>-xjc-XJsr303Annotations:generateServiceValidationAnnotations=InOut</extraarg>
                    <extraarg>-xjc-XJsr303Annotations:targetNamespace=a</extraarg>
                    <extraarg>-xjc-XJsr303Annotations:generateNotNullAnnotations=true</extraarg>
                    <extraarg>-xjc-XJsr303Annotations:validationAnnotations=jakarta</extraarg>
                  </extraargs>
                </wsdlOption>
              </wsdlOptions>
            </configuration>
            <goals>
              <goal>wsdl2java</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.fillumina</groupId>
            <artifactId>krasa-jaxb-tools</artifactId>
            <version>${krasa-jaxb-tools.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      }
</pre>

 *
 * The plugin is configured in {@code /resources/META-INF/tool-plugin.xml} .
 *
 * @author Vojtěch Krása
 * @author Francesco Illuminati
 */
public class ValidSEIGenerator extends SEIGenerator {

    @Override
	public String getName() {
		return "krasa";
	}

	@Override
	public void generate(ToolContext ctx) throws ToolException {
		ValidationsOptions validationsOptions = parseArguments(ctx);

		ProcessorForJavaModel processorForJavaModel = new ProcessorForJavaModel(validationsOptions);

		Map<QName, JavaModel> map = CastUtils.cast((Map<?, ?>) ctx.get(WSDLToJavaProcessor.MODEL_MAP));
		map
				.values()
				.forEach(processorForJavaModel::process);

		super.generate(ctx);
	}

	private ValidationsOptions parseArguments(ToolContext ctx) throws ToolException {
		ValidationsOptions.Builder optionsBuilder = ValidationsOptions.builder();

        String[] xjcArgs = (String[]) ctx.get(ToolConstants.CFG_XJC_ARGS);
		if (xjcArgs != null) {
			System.err.println("xjcArgs: \n" + Arrays.deepToString(xjcArgs));

			Arrays.stream(xjcArgs).forEachOrdered(xjcArg -> {
                try {
                    optionsBuilder.parseArgument(xjcArg);
                } catch (BadCommandLineException e) {
                    throw new ToolException(
                            "Unable to parse XJC Arguments when generating Java Interfaces. Options given: " +
                                    Arrays.deepToString(xjcArgs), e);
                }
            });
		}

		ValidationsOptions validationsOptions = optionsBuilder.build();

		validationsOptions.logActualOptions();

		return validationsOptions;
	}
}
